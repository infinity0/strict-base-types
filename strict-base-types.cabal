Name:           strict-base-types
Version:        0.6.1
Synopsis:       Strict variants of the types provided in base.
Category:       Data
Description:
     This package builds on top of the
     <http://hackage.haskell.org/package/strict strict> package, by including
     more utilities and instances for type-classes from the @lens@, @aeson@,
     and @QuickCheck@ packages. It also re-exports the modules from @strict@
     under different names, that adhere to the more standard naming convention
     that strictness variants of an existing datatype are identified by
     suffixing \'Strict\' or \'Lazy\' in the module hierarchy.
     .
     Of particluar interest is the 'Control.Lens.Iso.Strict' type-class
     provided by the lens library. It is used in the following example to
     simplify the modification of strict fields.
     .
     > (-# LANGUAGE TemplateHaskell #-)   -- replace with curly braces,
     > (-# LANGUAGE OverloadedStrings #-) -- the Haddock prologues are a P.I.T.A!
     >
     > import           Control.Lens ( (.=), Strict(strict), from, Iso', makeLenses)
     > import           Control.Monad.State.Strict (State)
     > import qualified Data.Map                   as M
     > import qualified Data.Maybe.Strict          as S
     > import qualified Data.Text                  as T
     >
     > -- | An example of a state record as it could be used in a (very minimal)
     > -- role-playing game.
     > data GameState = GameState
     >     ( _gsCooldown :: !(S.Maybe Int)
     >     , _gsHealth   :: !Int
     >     )  -- replace with curly braces, *grmbl*
     >
     > makeLenses ''GameState
     >
     > -- The isomorphism, which converts a strict field to its lazy variant
     > lazy :: Strict lazy strict => Iso' strict lazy
     > lazy = from strict
     >
     > type Game = State GameState
     >
     > cast :: T.Text -> Game ()
     > cast spell =
     >     gsCooldown.lazy .= M.lookup spell spellDuration
     >     -- ... implement remainder of spell-casting ...
     >   where
     >     spellDuration = M.fromList [("fireball", 5)]
     .
     See
     <http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html>
     for a gentle introduction to lenses and state manipulation.
License:        BSD3
License-File:   LICENSE
Author:         Roman Leshchinskiy <rl@cse.unsw.edu.au>,
                Simon Meier <iridcode@gmail.com>
Maintainer:     Bas van Dijk <v.dijk.bas@gmail.com>, Oleg Grenrus <oleg.grenrus@iki.fi>, Simon Meier <iridcode@gmail.com>
Copyright:      (c) 2006-2008 by Roman Leshchinskiy
                (c) 2013-2014 by Simon Meier
Homepage:       https://github.com/meiersi/strict-base-types
Cabal-Version: >= 1.6
Build-type:     Simple
Tested-with:
  GHC==7.4.2,
  GHC==7.6.3,
  GHC==7.8.4,
  GHC==7.10.3,
  GHC==8.0.2,
  GHC==8.2.2,
  GHC==8.4.4,
  GHC==8.6.5,
  GHC==8.8.1

extra-source-files:
  CHANGES

source-repository head
  type:     git
  location: https://github.com/meiersi/strict-base-types.git

library
  ghc-options:    -Wall -fwarn-incomplete-uni-patterns
  if impl(ghc >= 8.0)
    ghc-options: -Wcompat -Wnoncanonical-monad-instances -Wnoncanonical-monadfail-instances
  build-depends:
      base       >= 4.5 && < 5
    , lens       >= 3.9
    , QuickCheck >= 2
    , aeson      >= 0.6
    , binary     >= 0.5
    , deepseq    >= 1.3
    , hashable   >= 1.1.1.0
    , strict     >= 0.4
    , bifunctors >= 3.0
    , ghc-prim

  if !impl(ghc >= 8.0)
    build-depends: semigroups >= 0.18.3

  hs-source-dirs:    src
  exposed-modules:
      Data.Tuple.Strict
      Data.Maybe.Strict
      Data.Either.Strict

